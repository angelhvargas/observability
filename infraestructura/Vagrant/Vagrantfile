# angel vargas
# deploy cluster
servers = [
  {
    :name => "k8smaster",
    :type => "master",
    :box => "ubuntu/bionic64",
    :box_version => "20200425.0.0",
    :eth1 => "192.168.205.10",
    :mem => "2048",
    :cpu => "2"
  },
  {
    :name => "k8snode1",
    :type => "node",
    :box => "ubuntu/bionic64",
    :box_version => "20200425.0.0",
    :eth1 => "192.168.205.11",
    :mem => "2048",
    :cpu => "2"
  },
  {
    :name => "k8snode2",
    :type => "node",
    :box => "ubuntu/bionic64",
    :box_version => "20200425.0.0",
    :eth1 => "192.168.205.12",
    :mem => "2048",
    :cpu => "1"
  },
  {
    :name => "k8snode3",
    :type => "node",
    :box => "ubuntu/bionic64",
    :box_version => "20200425.0.0",
    :eth1 => "192.168.205.13",
    :mem => "2048",
    :cpu => "1"
  },
  {
    :name => "k8snode4",
    :type => "node",
    :box => "ubuntu/bionic64",
    :box_version => "20200425.0.0",
    :eth1 => "192.168.205.14",
    :mem => "2048",
    :cpu => "1"
  },
  {
    :name => "k8snode5",
    :type => "node",
    :box => "ubuntu/bionic64",
    :box_version => "20200425.0.0",
    :eth1 => "192.168.205.15",
    :mem => "2048",
    :cpu => "1"
  }
]
$configureBox = <<-SCRIPT
     # install docker
     apt install apt-transport-https ca-certificates curl software-properties-common -y 
     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
     sudo apt-key fingerprint 0EBFCD88
     sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
     sudo apt update -y
     sudo apt install  docker.io -y
# Setup daemon.
     sudo cat > /etc/docker/daemon.json <<EOF
     {
       "exec-opts": ["native.cgroupdriver=systemd"],
       "log-driver": "json-file",
       "log-opts": {
       "max-size": "100m"
       },
     "storage-driver": "overlay2"
     }
EOF
     mkdir -p /etc/systemd/system/docker.service.d
     # Restart docker.
     systemctl daemon-reload
     systemctl restart docker
     # add user vagrant to docker group
     sudo usermod -aG docker vagrant 
     sudo systemctl enable docker
     #------------------------
     apt install -y apt-transport-https curl
     sudo apt update && sudo apt-get install -y apt-transport-https curl
     curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
     cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
     deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
     sudo apt update -y
     sudo apt install -y kubelet kubeadm kubectl
     sudo apt-mark hold kubelet kubeadm kubectl
     # disable swap
     #
     # kubelet requires swap off
     swapoff -a
     # keep swap off after reboot
     sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
     # ip of this box
     IP_ADDR=`ifconfig enp0s8 | grep netmask | awk '{print $2}'| cut -f2 -d:`
     # set node-ip
     sudo touch /etc/default/kubelet
     sudo sed -i "/^[^#]*KUBELET_EXTRA_ARGS=/c\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR" /etc/default/kubelet
     sudo systemctl restart kubelet
SCRIPT
$configureMaster = <<-SCRIPT
    echo "This is master"
    # ip of this box
    IP_ADDR=`ifconfig enp0s8 | grep netmask | awk '{print $2}'| cut -f2 -d:`
    # install k8s master
    HOST_NAME=$(hostname -s)
    kubeadm init --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=192.168.0.0/16
    #copying credentials to regular user - vagrant
    sudo --user=vagrant mkdir -p /home/vagrant/.kube
    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config
    # install Calico pod network addon
    export KUBECONFIG=/etc/kubernetes/admin.conf
#    curl https://docs.projectcalico.org/manifests/calico.yaml -O
    #kubectl apply -f  https://docs.projectcalico.org/manifests/calico.yaml
    curl -sO  https://github.com/projectcalico/calicoctl/releases/download/v3.13.3/calicoctl
    sudo chmod +x calicoctl
    sudo mv calicoctl /usr/local/bin/
    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
    kubectl apply -f https://docs.projectcalico.org/v3.11/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh
    chmod +x /etc/kubeadm_join_cmd.sh
    # required for setting up password less ssh between guest VMs
    sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
    sudo service sshd restart
SCRIPT
$configureNode = <<-SCRIPT
    echo "This is worker"
    apt-get install -y sshpass
    sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .
    sh ./kubeadm_join_cmd.sh
SCRIPT
Vagrant.configure("2") do |config|
  servers.each do |opts|
    config.vm.define opts[:name] do |config|
      config.vm.box = opts[:box]
      config.vm.box_version = opts[:box_version]
      config.vm.hostname = opts[:name]
      config.vm.network :private_network, ip: opts[:eth1]
      config.vm.provider "virtualbox" do |v|
        v.name = opts[:name]
        v.memory = opts[:mem]
        v.cpus = opts[:cpu]
#        v.customize = ["modifyvm", :id, "--groups", "/Angel Vargas"]
#        v.customize = ["modifyvm", :id, "--memory", opts[:mem]]
#        v.customize = ["modifyvm", :id, "--cpus", opts[:cpu]]
      end
      config.vm.provision "shell", inline: $configureBox
      if opts[:type] == "master"
        config.vm.provision "shell", inline: $configureMaster
      else
        config.vm.provision "shell", inline: $configureNode
      end
    end
  end
end